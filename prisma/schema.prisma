// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Conversation  Conversation[]

    messagesSent Message[] @relation("sender")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Value {
    id    String @id @default(cuid())
    value String
}

model Conversation {
    id           String    @id @default(cuid())
    participants User[]
    Message      Message[]
    createdAt    DateTime  @default(now())
}

model Message {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAT      DateTime     @updatedAt
    content        String       @db.Text
    sender         User         @relation(name: "sender", fields: [senderId], references: [id])
    senderId       String
    Conversation   Conversation @relation(fields: [conversationId], references: [id])
    conversationId String

    @@index([id])
    @@index([senderId])
    @@index([conversationId])
}
